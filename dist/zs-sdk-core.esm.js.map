{"version":3,"file":"zs-sdk-core.esm.js","sources":["../src/constants.ts","../src/utils/number.ts","../src/entities/fractions/fraction.ts","../src/entities/chain.ts","../src/utils/validateValue.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth.ts","../src/entities/nativeCurrency.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport BN from 'bn.js'\n\nexport const BNtoJSBI = (value: BN) => JSBI.BigInt(value)\nexport const JSBItoBN = (value: JSBI) => new BN(value.toString())\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { JSBItoBN } from '../../utils/number'\nimport BN from 'bn.js'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public get numberatorBN(): BN {\n    return JSBItoBN(this.numerator)\n  }\n\n  public get denominatorBN(): BN {\n    return JSBItoBN(this.denominator)\n  }\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  public get quotientBN(): BN {\n    return JSBItoBN(this.quotient)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator),\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","export enum ChainId {\n  MAINNET = 1,\n  GÃ–RLI = 5,\n  MATIC = 137,\n  MUMBAI = 80001,\n  BSCTESTNET = 97,\n  BSCMAINNET = 56,\n  AVAXTESTNET = 43113,\n  AVAXMAINNET = 43114,\n  FANTOM = 250,\n  CRONOS = 25,\n  ARBITRUM = 42161,\n  BTTC = 199,\n  VELAS = 106,\n  AURORA = 1313161554,\n  OASIS = 42262,\n  OPTIMISM = 10,\n  SOLANA = 101, //fake id\n  ETHW = 10001,\n}\n\nexport function getChainType(chainId: ChainId) {\n  if (chainId === ChainId.SOLANA) return ChainType.SOLANA\n  return ChainType.EVM\n}\n\nexport enum ChainType {\n  EVM = 'EVM',\n  SOLANA = 'SOLANA',\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { MaxUint256 } from '../constants'\nimport { ChainId, ChainType, getChainType } from '../entities/chain'\n\nconst ONE = JSBI.BigInt(1)\nconst ZERO = JSBI.BigInt(0)\n\nenum RustType {\n  u64 = 'u64',\n  U256 = 'U256',\n}\n\nconst RUST_TYPE_MAXIMA = {\n  [RustType.u64]: JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(64)), ONE),\n  [RustType.U256]: JSBI.subtract(JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(256)), ONE),\n}\n\nfunction validateRustTypeValue(value: JSBI, rustType: RustType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${rustType}.`)\n  invariant(JSBI.lessThanOrEqual(value, RUST_TYPE_MAXIMA[rustType]), `${value} is not a ${rustType}.`)\n}\n\nexport default function validateValue(chainId: ChainId, value: JSBI) {\n  const chainType = getChainType(chainId)\n  if (chainType === ChainType.SOLANA) validateRustTypeValue(value, RustType.u64)\n  if (chainType === ChainType.EVM) invariant(JSBI.lessThanOrEqual(value, MaxUint256), 'AMOUNT')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding } from '../../constants'\nimport validateValue from '../../utils/validateValue'\nimport BN from 'bn.js'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh | BN): CurrencyAmount<T> {\n    if (rawAmount instanceof BN) return new CurrencyAmount(currency, rawAmount.toString())\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh,\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    validateValue(currency.chainId, this.quotient)\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import { Token } from '..'\nimport { CurrencyAmount } from './currencyAmount'\nexport class TokenAmount extends CurrencyAmount<Token> {}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId, ChainType, getChainType } from './chain'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: ChainId\n  public readonly chainType: ChainType\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId in ChainId ? (chainId as ChainId) : ChainId.MAINNET\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n    this.chainType = getChainType(this.chainId)\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { getAddress } from '@ethersproject/address'\nimport { PublicKey } from '@solana/web3.js'\nimport { ChainId, ChainType, getChainType } from '../entities/chain'\n\nconst isValidSolanaAddress = (address: string): boolean => {\n  try {\n    if (!address) return false\n    const pub = new PublicKey(address)\n    if (PublicKey.isOnCurve(pub)) return true\n    // .isOnCurve false on some valid address\n    // e.g: DAI https://solscan.io/address/EjmyN6qEC1Tf1JxiG1ae7UTJhUxSwk1TCWNWqxWV4J6o\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string, chainId: ChainId): string {\n  try {\n    const chainType = getChainType(chainId)\n    if (chainType === ChainType.SOLANA) {\n      if (isValidSolanaAddress(address)) return address\n      throw new Error(`${address} is not a valid address.`)\n    }\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import { PublicKey } from '@solana/web3.js'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { ChainType } from './chain'\nimport { Currency } from './currency'\nimport BN from 'bn.js'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n  public mint: PublicKey | null\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address, chainId)\n    if (this.chainType === ChainType.SOLANA) this.mint = new PublicKey(this.address)\n    else this.mint = null\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    if (this.chainType === ChainType.SOLANA) return new BN(this.mint!.toBytes()).lt(new BN(other.mint!.toBytes()))\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { ChainId } from './chain'\nimport { Token } from './token'\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.ETHW]: new Token(ChainId.ETHW, '0x7Bf88d2c0e32dE92CdaF2D43CcDc23e8Edfd5990', 18, 'WETHW', 'Wrapped ETHPoW'),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0x48f6D7dAE56623Dde5a0D56B283165cAE1753D70', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic',\n  ),\n  [ChainId.MUMBAI]: new Token(\n    ChainId.MUMBAI,\n    '0x19395624C030A11f58e820C3AeFb1f5960d9742a',\n    18,\n    'WMATIC',\n    'Wrapped Matic',\n  ),\n  [ChainId.BSCTESTNET]: new Token(\n    ChainId.BSCTESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.BSCMAINNET]: new Token(\n    ChainId.BSCMAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n  ),\n  [ChainId.AVAXTESTNET]: new Token(\n    ChainId.AVAXTESTNET,\n    '0x1D308089a2D1Ced3f1Ce36B1FcaF815b07217be3',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n  ),\n  [ChainId.AVAXMAINNET]: new Token(\n    ChainId.AVAXMAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n  ),\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n    18,\n    'WFTM',\n    'Wrapped Fantom',\n  ),\n  [ChainId.CRONOS]: new Token(ChainId.CRONOS, '0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23', 18, 'WCRO', 'Wrapped CRO'),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.BTTC]: new Token(\n    ChainId.BTTC,\n    '0x8D193c6efa90BCFf940A98785d1Ce9D093d3DC8A',\n    18,\n    'WBTT',\n    'Wrapped BitTorrent',\n  ),\n  [ChainId.VELAS]: new Token(ChainId.VELAS, '0xc579D1f3CF86749E05CD06f7ADe17856c2CE3126', 18, 'WVLX', 'Wrapped VLX'),\n  [ChainId.AURORA]: new Token(ChainId.AURORA, '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB', 18, 'WETH', 'Wrapped ETH'),\n  [ChainId.OASIS]: new Token(ChainId.OASIS, '0x21C718C22D52d0F3a789b752D4c2fD5908a8A733', 18, 'WROSE', 'Wrapped ROSE'),\n  [ChainId.OPTIMISM]: new Token(\n    ChainId.OPTIMISM,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether',\n  ),\n  [ChainId.SOLANA]: new Token(ChainId.SOLANA, 'So11111111111111111111111111111111111111112', 9, 'WSOL', 'Wrapped SOL'),\n}\n","import { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { WETH } from './weth'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n\n  public constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n  }\n\n  get wrapped(): Token {\n    return WETH[this.chainId]\n  }\n\n  equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '.'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH } from './weth'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH[this.chainId as ChainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["TradeType","Rounding","MaxUint256","JSBI","BigInt","BNtoJSBI","value","JSBItoBN","BN","toString","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","ChainId","getChainType","chainId","SOLANA","ChainType","EVM","ONE","ZERO","RustType","RUST_TYPE_MAXIMA","u64","exponentiate","U256","validateRustTypeValue","rustType","greaterThanOrEqual","lessThanOrEqual","validateValue","chainType","CurrencyAmount","currency","decimalScale","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","TokenAmount","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","MAINNET","isValidSolanaAddress","address","pub","PublicKey","isOnCurve","e","validateAndParseAddress","getAddress","error","Token","mint","sortsBefore","toBytes","lt","toLowerCase","WETH","ETHW","GÃ–RLI","MATIC","MUMBAI","BSCTESTNET","BSCMAINNET","AVAXTESTNET","AVAXMAINNET","FANTOM","CRONOS","ARBITRUM","BTTC","VELAS","AURORA","OASIS","OPTIMISM","NativeCurrency","isNative","Ether","onChain","_etherCache","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","TWO","sqrt","Math","floor","toNumber","z","x"],"mappings":"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"}